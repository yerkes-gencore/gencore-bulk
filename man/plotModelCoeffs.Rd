% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotGeneExpression.R
\name{plotModelCoeffs}
\alias{plotModelCoeffs}
\title{Create arrows for coefficients from model fit}
\usage{
plotModelCoeffs(gene, expression, coefficients, data_only = FALSE)
}
\arguments{
\item{gene}{Gene to plot}

\item{expression}{Character vector of a contrast expression,
consisting of terms present in \code{coefficients} added or subtracted together}

\item{coefficients}{Matrix of coefficients from model fit}

\item{data_only}{Whether to return a dataframe instead of a ggplot object.
Default FALSE.}
}
\value{
A ggplot2::geom_segment if data_only = FALSE, else a data.frame
}
\description{
Extracts coefficients from a matrix based on the gene and terms of interest.
Creates a dataframe for a geom_segment to be added to a plot like that returned
from \code{gencoreBulk::plotGeneExpression()}
}
\examples{
\dontrun{
 plotGeneExpression(gene = 'JUN', 
                   counts = model_fit$EList$E,
                   metadata = model_fit$targets,
                   grouping = 'grp',
                   subsetting = 'day', subsets = 'D28') +
 plotModelCoeffs(gene = 'JUN',
                 expr = "(Intercept) + dayD28 + grpgrp3 + dayD28:grpgrp3",
                 coefficients = model_fit$coefficients)  
                 
 ## Or you can return the data for manual plotting
 arrow_coords <- plotModelCoeffs(gene = 'JUN',
                                 "(Intercept) + dayD28 + grpgrp3 + dayD28:grpgrp3",
                                 coefficients = model_fit$coefficients, 
                                 data_only = TRUE)  
 ## Can edit values here if desired, such as X coordinates
 ## arrow_coords$x = 0.5

 plotGeneExpression(gene = 'JUN', 
                counts = model_fit$EList$E,
                metadata = model_fit$targets,
                grouping = 'grp',
                subsetting = 'day', subsets = 'D28') +
 ## Then manually create the arrows
   ggplot2::geom_segment(data = arrow_coords, 
                         aes(x = x,
                             xend = x,
                             y = y, 
                             yend = yend,
                             color = terms),
                         arrow = ggplot2::arrow()) 
}
}
